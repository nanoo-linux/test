/*----- PROTECTED REGION ID(StateScanner.h) ENABLED START -----*/
//=============================================================================
//
// file :        StateScanner.h
//
// description : Include for the StateScanner class.
//
// project :     .
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef STATESCANNER_H
#define STATESCANNER_H


#include <tango.h>

#include <memory>

/*----- PROTECTED REGION END -----*/


/**
 *	StateScanner class Description:
 *	
 */

namespace StateScanner_ns
{
	/*----- PROTECTED REGION ID(StateScanner::Additional Class Declarations) ENABLED START -----*/

		//		Additional Class Declarations
class Machine;

	/*----- PROTECTED REGION END -----*/	//	StateScanner::Additional Class Declarations


class StateScanner : public Tango::Device_4Impl
{


	/*----- PROTECTED REGION ID(StateScanner::Data Members) ENABLED START -----*/

	//		Add your own data members
	std::shared_ptr <Machine> machine_;
	/*----- PROTECTED REGION END -----*/	//	StateScanner::Data Members


//	Device property data members
public:	

//	Attribute data members
public:
	Tango::DevULong	*attr_Delta1_read;
	Tango::DevULong	*attr_Delta2_read;
	Tango::DevDouble	*attr_VDelta_read;
	Tango::DevDouble	*attr_VStart_read;
	Tango::DevDouble	*attr_VStop_read;
	Tango::DevString	*attr_Actuator_read;
	Tango::DevString	*attr_Sensor_read;
	Tango::DevDouble	*attr_Spectrum_read;



//	Constructors and destructors
public:
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	StateScanner(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	StateScanner(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly allocated Command object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	StateScanner(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The object destructor.
	 */	
	~StateScanner() {delete_device();};



//	Miscellaneous methods
public:
	/**
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/**
	 *	Initialize the device
	 */
	virtual void init_device();
	/**
	 *	Read the device properties from database
	 */
	 void get_device_property();
	/**
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	/**
	 *	Method      : StateScanner::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	virtual void read_attr_hardware(vector<long> &attr_list);


	/**
	 *	Delta1 attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_Delta1(Tango::Attribute &attr);
	virtual void write_Delta1(Tango::WAttribute &attr);
	virtual bool is_Delta1_allowed(Tango::AttReqType type);



	/**
	 *	Delta2 attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevULong
	 *	Attr type:	Scalar 
	 */
	virtual void read_Delta2(Tango::Attribute &attr);
	virtual void write_Delta2(Tango::WAttribute &attr);
	virtual bool is_Delta2_allowed(Tango::AttReqType type);



	/**
	 *	VDelta attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_VDelta(Tango::Attribute &attr);
	virtual void write_VDelta(Tango::WAttribute &attr);
	virtual bool is_VDelta_allowed(Tango::AttReqType type);



	/**
	 *	VStart attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_VStart(Tango::Attribute &attr);
	virtual void write_VStart(Tango::WAttribute &attr);
	virtual bool is_VStart_allowed(Tango::AttReqType type);



	/**
	 *	VStop attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Scalar 
	 */
	virtual void read_VStop(Tango::Attribute &attr);
	virtual void write_VStop(Tango::WAttribute &attr);
	virtual bool is_VStop_allowed(Tango::AttReqType type);



	/**
	 *	Actuator attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_Actuator(Tango::Attribute &attr);
	virtual void write_Actuator(Tango::WAttribute &attr);
	virtual bool is_Actuator_allowed(Tango::AttReqType type);



	/**
	 *	Sensor attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevString
	 *	Attr type:	Scalar 
	 */
	virtual void read_Sensor(Tango::Attribute &attr);
	virtual void write_Sensor(Tango::WAttribute &attr);
	virtual bool is_Sensor_allowed(Tango::AttReqType type);



	/**
	 *	Spectrum attribute related methods.
	 *	Description: 
	 *
	 *	Data type:	Tango::DevDouble
	 *	Attr type:	Spectrum  max = 2048
	 */
	virtual void read_Spectrum(Tango::Attribute &attr);
	virtual bool is_Spectrum_allowed(Tango::AttReqType type);



	/**
	 *	Method      : StateScanner::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
		void add_dynamic_attributes();

//	Command related methods
public: 


	/**
	 *	Command Start related methods.
	 */
	void start();
	virtual bool is_Start_allowed(const CORBA::Any &any);

	/**
	 *	Command Stop related methods.
	 */
	void stop();
	virtual bool is_Stop_allowed(const CORBA::Any &any);

	/**
	 *	Command Save related methods.
	 */
	void save();
	virtual bool is_Save_allowed(const CORBA::Any &any);



	/*----- PROTECTED REGION ID(StateScanner::Additional Method prototypes) ENABLED START -----*/

	//	Additional Method prototypes

	/*----- PROTECTED REGION END -----*/	//	StateScanner::Additional Method prototypes

};

	/*----- PROTECTED REGION ID(StateScanner::Additional Classes Definitions) ENABLED START -----*/

	//	Additional Classes definitions

	/*----- PROTECTED REGION END -----*/	//	StateScanner::Additional Classes Definitions

} //	namespace

#endif	//	STATESCANNER_H
